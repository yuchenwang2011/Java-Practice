1.Queue<Integer> queue = new LinkedList<Integer>(); 
  queue.offer(); queue.poll();

2.List<Integer> list = new ArrayList<Integer>();
  list.add(); list.remove(list.size() - 1 );
  for(int i = 0; i < list.size(); i++){
     int num = list.get(i);
  }
  List<List<Integer>> result = new ArrayList<List<Integer>>();
  result.add(new ArrayList<Integer>(tmp));

3.HashMap<Character, Integer> map = new HashMap<Character, Integer>();
  map.put();map.containsKey();
  HashSet<Integer> set = new HashSet<Integer>();
  if(set.add(n) == false)
  
4.StringBuilder sb = new StringBuilder();
  for(int i = 0; i < strings.length; i++) {
     sb.insert(0, strings[i]);
  }
  char[] c = string.toCharArray();
  return new String(c);
  return str1.equals(str2);
  String[] strings = string.split(",");
  String opponent = s.substring(0,i) + "--" + s.substring(i+2, s.length());
  String flip = s.substring(0,i) + "--";
  flip = (i+1 == s.length()-1) ? flip : flip + s.substring(i+2,s.length()); 
  s = s.trim();
  String part1 = s.substring(0,i); //ends at i - 1, part1/2 has no ith letter
  String part2 = s.substring(i+1); //starts from i + 1 th 
  for(int i = 0, j = num.length()-1; i <=j; i++, j--){
    if("00 11 88 696".contains(num.charAt(i) + "" + num.charAt(j)) == false) return false;
  }

5. Deque<Integer> stack = new ArrayDeque<Integer>();
   stack.push(); stack.pop(); stack.isEmpty();
   int num = stack.peek();
   int size = stack.size();

6. PriorityQueue<Integer> pq = new PriorityQueue<Integer>(); //Java use min priority queue, smallest in front
   pq.offer(); pq.add(); pq.remove(); pq.poll(); pq.peek();

7. Integer.MAX_VALUE;
   Integer.MIN_VALUE;
   int num = Integer.valueOf(string);
   
8. int[][] array = new int[][];
   int[] result = new int[]{0,0};
   int row = array.length;
   int col = array[0].length;

9. Math.max(a,b);
   Math.min(a,b);
   Math.abs(a);
   int root = (int) Math.sqrt(n);
   //Below 2 lines to calculate sqrt
   int mid = start + (end - start)/2;
   if(mid == x / mid || mid < x/mid && (mid + 1) > x / (mid+1)) return mid;
   int n = (int) Math.pow(num,2);
   
10. n = n >> 1;
   n = n >> 1; //if n is a unsigned integer
   val |= c.charAt(i) - 'a';
   if(m & n == 0)
   result = result ^ nums[i];
   diff &= -diff; //get the right most 1
   firstBit = (nums[i] >> j) & 1;
   n = n & (n-1); //delete the right most 1
   if(n > 0 && (n & (n-1) == 0) && (n & 0x55555555 == num)) //power of 4
   long r = x; while(r * r > x) {r = (r + x/r )/2;} return (int) r;  //Newton's Iteration
   long bit = 1L << 16
   
11. char c = string.charAt(i);
    char[] c = string.toCharArray();
    if(c == 'a') {;}
    int a = string.charAt(0) - 'a';

12.Arrays.sort(nums);
   Arrays.sort(strings, new Comparator<String>() {
       public int compare(String s1, String s2){
          String a = s1 + s2;
          String b = s2 + s1;
          return a.compareTo(b);
       }
   });
   Comparator<String> compare = new Comparator<String>(...);
   Arrays.sort(strings, compare);
   Arrays.sort(intervals, new Comparator<Interval>(){
         public int compare(Interval a, Interval b) {return a.start - b.start;}
   });

13.public class NestedIterator implements Iterator<Integer> {
   }
   NestedIterator i = new NestedIterator(nestedList);
   while(i.hasNext()) int num = i.next();

14. char c = string.charAt(0);
    switch(c) {
      case '+': c = 'a'; break;
      case '-': c = 'b'; break;
      default:   c = 'c'; break;
    }
    int month = 8;  
    String monthString;
    switch (month) {
        case 1:  monthString = "January";
                 break;
        case 2:  monthString = "February";
                 break;
        default: monthString = "Invalid month";
                 break;
    }
