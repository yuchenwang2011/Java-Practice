2542. Maximum Subsequence Score
Medium 2.3K 109

You are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. You must choose a subsequence of indices from nums1 of length k.
For chosen indices i0, i1, ..., ik - 1, your score is defined as:
The sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2.
It can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]).
Return the maximum possible score.
A subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements.

Example 1:
Input: nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3
Output: 12
Explanation: 
The four possible subsequence scores are:
- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.
- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. 
- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. 
- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.
Therefore, we return the max score, which is 12.

Example 2:
Input: nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1
Output: 30
Explanation: 
Choosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score.

Constraints:
n == nums1.length == nums2.length
1 <= n <= 105
0 <= nums1[i], nums2[j] <= 105
1 <= k <= n
Accepted 61.3K Submissions 111.1K Acceptance Rate 55.2%

Answer:
//get inspired by this video https://www.youtube.com/watch?v=ax1DKi5lJwk
//all hot answers use this algorithm
class Solution {
    public long maxScore(int[] nums1, int[] nums2, int k) {
        if(nums1 == null || nums2 == null || nums1.length != nums2.length || k < 0 || k > nums1.length) return 0L;
        int[][] nums = new int[nums1.length][2];
        for(int i = 0; i < nums1.length; i++){
            nums[i] = new int[]{nums1[i], nums2[i]};
        }
        //因为我们想让乘数越大越好，但是呢他每次都是要min的值
        //所以干脆把整个数组都按乘数来从大到小排序
        //这样问题就转换成了，只需要思考sum of nums1就行了
        Arrays.sort(nums, (a, b) -> b[1] - a[1]);

        PriorityQueue<Integer> pq = new PriorityQueue<>(k, (a, b) -> a - b);
        long result = 0;
        long sum = 0;

        for(int[] current : nums){
            sum += current[0];
            pq.offer(current[0]);
            //这里很多人都没有说过，其实里面有三种情况
            //如果新进来的值是最小的，那这个pair无所谓，pq把num1poll掉，result因为小不产生影响
            //如果新进来的值是中等的，那poll掉的值只能是之前的，所以result还用现在current的乘数，没问题
            //如果新进来的值是最大的，那poll掉的值只能是之前的，所以result还用现在current的乘数，也没问题
            if(pq.size() > k) sum -= pq.poll();
            if(pq.size() == k) result = Math.max(result, sum * current[1]);
        }
        return result;
    }
}
