1.Queue<Integer> queue = new LinkedList<Integer>(); 
  Queue<int[]> queue = new LinkedList<int[]>();
  queue.offer(); queue.poll();

2.List<Integer> list = new ArrayList<Integer>();
  list.add(); list.remove(list.size() - 1 ); 
  for(int i = 0; i < list.size(); i++){
     int num = list.get(i);
  }
  List<List<Integer>> result = new ArrayList<List<Integer>>();
  result.add(new ArrayList<Integer>(tmp));
  result.add(0,root.val); //for postorder traversal
  result.add(Arrays.asList(nums[i],nums[start],nums[end]));
  result.set(j,result.get(j-1)+result.get(j));
  
  To create a list of zero
  Integer[] integers = new Integer[5];
  Arrays.fill(integers, 0);
  List<Integer> list = Arrays.asList(integers);
  List<Integer> bucket[] = new ArrayList[nums.length + 1];

3.
  //讲hashmap怎么工作的https://www.youtube.com/watch?v=c3RVW3KGIIE
  //必会的hashmap design题
  //https://github.com/yuchenwang2011/Java-Practice/blob/master/601-900/700-750/706.DesignHashMap.java
  HashMap<Character, Integer> map = new HashMap<Character, Integer>();
  //hashtable operations are all O(1) complexity and the space complexity is O(N)
  map.put(); map.containsKey(); map.containsValue(); map.remove(c);
  for(char c : map.keySet()) {;}
  HashSet<Integer> set = new HashSet<Integer>();
  if(set.add(n) == false)
  HashSet<String> s = new HashSet<String>();
  return new ArrayList<String>(s);
  map.put(number, map.containsKey(number) ? map.get(number) + 1 : 1);
  for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
    int i = entry.getKey();
    int j = entry.getValue();
  }
  for(int next : set)
  int i = set.iterator().next();
  
  
4.StringBuilder sb = new StringBuilder();
  sb.length();
  for(int i = 0; i < strings.length; i++) {
     sb.insert(0, strings[i]);
  }
  int length = sb.length(); sb.append("a"); sb.delete(length, sb.length());
  char[] c = string.toCharArray();
  return new String(c);
  return str1.equals(str2);
  String[] strings = string.split(",");
  //注意，substring(i,start) start最低是0,这时候啥都没有
  //如果substring(start), start最大是s.length()
  //也就是说substring接受的最大范围就是0到s.length()
  String opponent = s.substring(0,i) + "--" + s.substring(i+2, s.length());
  String flip = s.substring(0,i) + "--";
  flip = (i+1 == s.length()-1) ? flip : flip + s.substring(i+2,s.length()); 
  s = s.trim();
  String part1 = s.substring(0,i); //ends at i - 1, part1/2 has no ith letter
  String part2 = s.substring(i+1); //starts from i + 1 th 
  for(int i = 0, j = num.length()-1; i <=j; i++, j--){
    if("00 11 88 696".contains(num.charAt(i) + "" + num.charAt(j)) == false) return false;
  }
  sb.insert(index,"("); //insert before index;
  String s = sb.toString().replace("(0)","");
  s = s.trim().replaceAll("\\s+"," ");
  String[] tmp = s.split("\\s");
  String[] v1 = version1.split("\\.");
  while(path.indexOf("//") >= 0){
     path = path.trim().replaceAll("//","/");
  }
  int i = 0;
  while(i < string.length()) {int slash = string.indexOf("/",i);}
  char[] c = str.toCharArray();
  Arrays.sort(c);
  String key = String.valueOf(c);
  StringBuilder[] sb = new StringBuilder[numRows];
  for(int i = 0; i < sb.length; i++) sb[i] = new StringBuilder();
  return s.trim().length() -1 - s.trim().lastIndexOf(' ');
  System.out.println(str.substring(len-1,len)); //is the end char of the string, where len = str.length();
  while (strs[i].indexOf(result) != 0) result = result.substring(0, result.length() - 1);
  while(!strs[i].startsWith(sb.toString()) ) sb.deleteCharAt(sb.length() -1 ); 
  String s = Integer.toString(lower);
  s.replaceAll("[\\.\\-\\;\\,]"," ");

5. Deque<Integer> stack = new ArrayDeque<Integer>();
   stack.push(); stack.pop(); stack.isEmpty();
   int num = stack.peek();
   int size = stack.size();

6. PriorityQueue<Integer> pq = new PriorityQueue<Integer>(); //Java use min priority queue, smallest in front
   pq.offer(); pq.add(); pq.remove(); pq.poll(); pq.peek();
   PriorityQueue<ListNode> pq = new PriorityQueue<>(lists.length, (a,b) -> a.val - b.val);

7. Integer.MAX_VALUE; //2^31 - 1
   Integer.MIN_VALUE; //-2^31
   int num = Integer.valueOf(string);
   //parseInt() returns primitive integer type (int), whereby valueOf returns java.lang.Integer, 
   //which is the object representative of the integer. There are circumstances where you might want an Integer object, 
   //instead of a primitive type.
   String s = Integer.toString(lower);
   
8. int[][] array = new int[][];
   int[] result = new int[]{0,0};
   int row = array.length;
   int col = array[0].length;
   long a = 5; long b = 4; long c = a/b; //c == 1
   System.arraycopy(from, fromStart, to, toStart, length);

9. Math.max(a,b);
   Math.min(a,b);
   Math.abs(a);
   int root = (int) Math.sqrt(n);
   //Below 2 lines to calculate sqrt
   int mid = start + (end - start)/2;
   if(mid == x / mid || mid < x/mid && (mid + 1) > x / (mid+1)) return mid;
   int n = (int) Math.pow(num,2);
   return (Math.log10(n) / Math.log10(3)) % 1 ==0;
   //this is how to do the matrix multiplication
   https://patentimages.storage.googleapis.com/EP0480825A2/imgb0053.png
   result[i][j] += A[i][k] * B[k][j];
   for (int i = 2; i * i <= num; i++) {;} //for sqrt
   int boxRowStart = 3 * (i/3), boxColStart = 3 * (i%3); 
   char c = board[boxRowStart + j/3][boxColStart + j%3];
   
10. n = n >> 1;
   n = n >>> 1; //if n is a unsigned integer
   val |= 1 << (words[i].charAt(j) - 'a'); //give each appeared letter a '1' in the 32bits integer val
   if(m & n == 0)
   result = result ^ nums[i];
   diff &= -diff; //get the right most 1
   firstBit = (nums[i] >> j) & 1;
   n = n & (n-1); //delete the right most 1
   if(n > 0 && (n & (n-1) == 0) && (n & 0x55555555 == num)) //power of 4
   long r = x; while(r * r > x) {r = (r + x/r )/2;} return (int) r;  //Newton's Iteration
   long bit = 1L << 16
   
11. char c = string.charAt(i);
    char[] c = string.toCharArray();
    if(c == 'a') {;}
    int a = string.charAt(0) - 'a';
    long sum = 0; sum += s.charAt(i) - 'A' + 1;
    String result = ""; result = (char) ('A' + a) + result;
    String letter = (char) ('A' - 1 + a) + "";
    int[] result = new int[256]; int num = s.charAt(i); result[num]++;
    if(Character.isDigit(c)) {;}
    if(Character.isLetterOrDigit(a.charAt(la-1)) == false) {;}
    if (start < end && Character.toLowerCase(data[start]) != Character.toLowerCase(data[end]))

12.//Sorting
   Arrays.sort(nums);
   //就这么记，想正常升序排序就a.compareTo(b)。但凡是一个题稍微要懂点脑子的题，
   //把变形的、打乱了两个形参顺序的b放到前面，你就需要b.compareTo(a)
   Arrays.sort(strings, new Comparator<String>() {
       public int compare(String s1, String s2){
          String a = s1 + s2;
          String b = s2 + s1;
          return b.compareTo(a);
       }
   });
   Comparator<String> compare = new Comparator<String>(...);
   Arrays.sort(strings, compare);
   Arrays.sort(intervals, new Comparator<Interval>(){
         public int compare(Interval a, Interval b) {return a.start - b.start;}
   });
   List<String> list = map.get(key);
   Collections.sort(list);
   Insertion Sort: Like playing card games: https://en.wikipedia.org/wiki/File:Insertion-sort-example-300px.gif

   java8:
   Collecstions.sort(allNodes, (a,b) -> a.val - b.val);
   Arrays.sort(intervals, (a,b) -> a[0] - b[0]);

13.public class NestedIterator implements Iterator<Integer> {
   }
   NestedIterator i = new NestedIterator(nestedList);
   while(i.hasNext()) int num = i.next();
   
   ArrayList myList = new ArrayList();
   Iterator iter = myList.iterator();
   while(iter.hasNext()){
      System.out.println(iter.next());
   }

14. char c = string.charAt(0);
    switch(c) {
      case '+': c = 'a'; break;
      case '-': c = 'b'; break;
      default:   c = 'c'; break;
    }
    int month = 8;  
    String monthString;
    switch (month) {
        case 1:  monthString = "January";
                 break;
        case 2:  monthString = "February";
                 break;
        default: monthString = "Invalid month";
                 break;
    }
    switch(val){
      case 1: case 0: result = "";break;
      case 2: result = "abc"; break;
      case 3: result = "def"; break;
      case 4: result ="ghi";  break;
      case 5: result = "jkl"; break;
      case 6: result = "mno"; break;
      case 7: result = "pqrs";break;
      case 8: result = "tuv"; break;
      case 9: result = "wxyz";break;
      default: break;
    }
    

15. //strs is a List<String>, coins is a int[]
    for(String s : strs){;}
    for(int coin : coins) {;}

16. //Other primitive type
    Long.MIN_VALUE;
    Long.MAX_VALUE;
    long a = Math.abs((long) dividend);
    double target1 = target - 0.5, target2 = target + 0.5;

17. Preorder Traversal:  [F,B,G,A,D,#,I,#,#,C,E,H,*] --> [F,B,A,D,C,E,G,I,H]
    Inorder Traversal:   [F,B,G,A,D,#,I,#,#,C,E,H,*] --> [A,B,C,D,E,F,G,H,I]
    PostOrder Traversal: [F,B,G,A,D,#,I,#,#,C,E,H,*] --> [A,C,E,D,B,H,I,G,F]

18. //Some smart answer
    The DFS template refer question 113
    return M[num/1000] + C[(num%1000)/100] + X[(num%100)/10] + I[num%10];
    while(listNode.next != null) listNode = listNode.next; // to delete node which val == num
    if (listNode.next.val == num) listNode.next = listNode.next.next;
    H index: if(citations[i] >= length - i) return length - i;

19. //Arrays
    Arrays.equals(a,b);
    System.arraycopy(a,0,b,0,1); //copy from a to b, from index 0 to index 0, length == 1
    int[] a = {1,2,3};
    int[] b = a.clone();
    System.out.println(Arrays.toString(a));
    Arrays.copyOfRange(nodes, 0, mid);
    Arrays.sort(nums);
    Arrays.fill(integers, 0);
    List<Integer> list = Arrays.asList(integers);

20. public class Dog extends Canine implements Pet{...}

21. if(a instanceof String) int b = (String) a;

22. I/O
    In java8, you can do this
    https://docs.oracle.com/javase/8/docs/technotes/guides/language/try-with-resources.html

    Example 1:
    String filePath = "C:\\Stations.csv";
    BufferedReader read = null;
    String line = "";
    try{
      reader = new BufferedReader(new FileReader(filePath));
      while( (line =  reader.readLine()) != null) {
         String[] strings = lines.split(",");
         System.out.println(Arrays.asList(strings));
      }
    } catch {IOException ex} {
       ex.printStackTrace();
    }

    Example 2:
    Scanner sc = new Scanner(System.in);
		String myLine = sc.nextLine();
		System.out.println(myLine);
		int a = sc.nextInt();
		System.out.println(a);
		sc.close();

23. Date
    Example 1: 
        public static final long SECOND_MILLIS = 1000;
    	public static final long MINUTE_MILLIS = SECOND_MILLIS * 60;

	public static int minutesDiff(Date first, Date second){
	    if(first == null || second == null) return 0;
	    int diff = (int) ((second.getTime() - first.getTime()) / MINUTE_MILLIS);
	    return Math.abs(diff);
	}
	
        @Test
	public void testDiffInMins(){
	    Calendar calendar = Calendar.getInstance();
	    calendar.
	    (2018, 01,01, 01,01);
	    Date date1 = calendar.getTime();
	    calendar.
	    (Calendar.MINUTE, 02);
	    Date date2 = calendar.getTime();

	    int diff = DateUtils.minutesDiff(date1, date2);
	    assertEquals(diff, 1);
	}
	
24. ... parameter
      public void myMethod(String... strings){
        // method body
      }
      https://stackoverflow.com/questions/3158730/java-3-dots-in-parameters
    equals to: 
      myMethod(); // Likely useless, but possible
      myMethod("one", "two", "three");
      myMethod("solo");
      myMethod(new String[]{"a", "b", "c"});

25. Random
    Random ran = new Random();
    int x = ran.nextInt(6) + 5; //outcome of 5-10

26. 辗转相除 Euclidean algorithm
    private int gcd(int x, int y) {
        return y == 0 ? x : gcd(y, x % y);
    }
