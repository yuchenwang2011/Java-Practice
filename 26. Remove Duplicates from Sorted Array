Given a sorted array, remove the duplicates in place such that each element appear only once
 and return the new length.
Do not allocate extra space for another array, you must do this in place with constant memory.
For example,
Given input array nums = [1,1,2],
Your function should return length = 2, 
with the first two elements of nums being 1 and 2 respectively. 
It doesn't matter what you leave beyond the new length

Answer:
import java.util.Arrays;

public class removeDuplicate {
   public int removeDuplicates(int[] num) {
     int size = 0;
     if(num.length == 0 || num == null) return 0;
     for (int i = 0; i< num.length; i++) {
       if (num[size] != num[i]) {
         size ++;
        num[size] = num[i];
       }
     }
     return size+1;
   }
   
   public static void main(String[] args) {
     removeDuplicate myRemove = new removeDuplicate();
     int[] testData = new int[]{1,2,3,4,4,4,5,5,5,5,5,6,6,6,6,7,7,7,7,8,8,9,9};
     int size = myRemove.removeDuplicates(testData);
     System.out.println("size is " + size);
     System.out.println("data now is " + Arrays.toString(testData));
    }
}


//This is my answer second round
    public int removeDuplicates(int[] nums) {
         if(nums == null || nums.length == 0) return 0;
         if(nums .length == 1) return 1;
         int length = 0;
         for(int i = 1; i < nums .length ; i ++){
           if(nums [i] != nums [i -1]) nums [++length] = nums [i];
         }
         return length +1;
    }
